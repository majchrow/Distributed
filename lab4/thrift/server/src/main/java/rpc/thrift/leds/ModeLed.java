/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rpc.thrift.leds;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-04-26")
public class ModeLed {

  public interface Iface extends BasicLed.Iface {

    public Mode setMode(Mode mode) throws rpc.thrift.shared.DeviceNotActiveException, org.apache.thrift.TException;

    public Mode getMode() throws rpc.thrift.shared.DeviceNotActiveException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends BasicLed .AsyncIface {

    public void setMode(Mode mode, org.apache.thrift.async.AsyncMethodCallback<Mode> resultHandler) throws org.apache.thrift.TException;

    public void getMode(org.apache.thrift.async.AsyncMethodCallback<Mode> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends BasicLed.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Mode setMode(Mode mode) throws rpc.thrift.shared.DeviceNotActiveException, org.apache.thrift.TException
    {
      send_setMode(mode);
      return recv_setMode();
    }

    public void send_setMode(Mode mode) throws org.apache.thrift.TException
    {
      setMode_args args = new setMode_args();
      args.setMode(mode);
      sendBase("setMode", args);
    }

    public Mode recv_setMode() throws rpc.thrift.shared.DeviceNotActiveException, org.apache.thrift.TException
    {
      setMode_result result = new setMode_result();
      receiveBase(result, "setMode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.deviceNotActiveException != null) {
        throw result.deviceNotActiveException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setMode failed: unknown result");
    }

    public Mode getMode() throws rpc.thrift.shared.DeviceNotActiveException, org.apache.thrift.TException
    {
      send_getMode();
      return recv_getMode();
    }

    public void send_getMode() throws org.apache.thrift.TException
    {
      getMode_args args = new getMode_args();
      sendBase("getMode", args);
    }

    public Mode recv_getMode() throws rpc.thrift.shared.DeviceNotActiveException, org.apache.thrift.TException
    {
      getMode_result result = new getMode_result();
      receiveBase(result, "getMode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.deviceNotActiveException != null) {
        throw result.deviceNotActiveException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMode failed: unknown result");
    }

  }
  public static class AsyncClient extends BasicLed.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void setMode(Mode mode, org.apache.thrift.async.AsyncMethodCallback<Mode> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setMode_call method_call = new setMode_call(mode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setMode_call extends org.apache.thrift.async.TAsyncMethodCall<Mode> {
      private Mode mode;
      public setMode_call(Mode mode, org.apache.thrift.async.AsyncMethodCallback<Mode> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mode = mode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setMode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setMode_args args = new setMode_args();
        args.setMode(mode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Mode getResult() throws rpc.thrift.shared.DeviceNotActiveException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setMode();
      }
    }

    public void getMode(org.apache.thrift.async.AsyncMethodCallback<Mode> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMode_call method_call = new getMode_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMode_call extends org.apache.thrift.async.TAsyncMethodCall<Mode> {
      public getMode_call(org.apache.thrift.async.AsyncMethodCallback<Mode> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMode_args args = new getMode_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Mode getResult() throws rpc.thrift.shared.DeviceNotActiveException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMode();
      }
    }

  }

  public static class Processor<I extends Iface> extends BasicLed.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("setMode", new setMode());
      processMap.put("getMode", new getMode());
      return processMap;
    }

    public static class setMode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setMode_args> {
      public setMode() {
        super("setMode");
      }

      public setMode_args getEmptyArgsInstance() {
        return new setMode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public setMode_result getResult(I iface, setMode_args args) throws org.apache.thrift.TException {
        setMode_result result = new setMode_result();
        try {
          result.success = iface.setMode(args.mode);
        } catch (rpc.thrift.shared.DeviceNotActiveException deviceNotActiveException) {
          result.deviceNotActiveException = deviceNotActiveException;
        }
        return result;
      }
    }

    public static class getMode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMode_args> {
      public getMode() {
        super("getMode");
      }

      public getMode_args getEmptyArgsInstance() {
        return new getMode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getMode_result getResult(I iface, getMode_args args) throws org.apache.thrift.TException {
        getMode_result result = new getMode_result();
        try {
          result.success = iface.getMode();
        } catch (rpc.thrift.shared.DeviceNotActiveException deviceNotActiveException) {
          result.deviceNotActiveException = deviceNotActiveException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends BasicLed.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("setMode", new setMode());
      processMap.put("getMode", new getMode());
      return processMap;
    }

    public static class setMode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setMode_args, Mode> {
      public setMode() {
        super("setMode");
      }

      public setMode_args getEmptyArgsInstance() {
        return new setMode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Mode> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Mode>() { 
          public void onComplete(Mode o) {
            setMode_result result = new setMode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            setMode_result result = new setMode_result();
            if (e instanceof rpc.thrift.shared.DeviceNotActiveException) {
              result.deviceNotActiveException = (rpc.thrift.shared.DeviceNotActiveException) e;
              result.setDeviceNotActiveExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setMode_args args, org.apache.thrift.async.AsyncMethodCallback<Mode> resultHandler) throws org.apache.thrift.TException {
        iface.setMode(args.mode,resultHandler);
      }
    }

    public static class getMode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMode_args, Mode> {
      public getMode() {
        super("getMode");
      }

      public getMode_args getEmptyArgsInstance() {
        return new getMode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Mode> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Mode>() { 
          public void onComplete(Mode o) {
            getMode_result result = new getMode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMode_result result = new getMode_result();
            if (e instanceof rpc.thrift.shared.DeviceNotActiveException) {
              result.deviceNotActiveException = (rpc.thrift.shared.DeviceNotActiveException) e;
              result.setDeviceNotActiveExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMode_args args, org.apache.thrift.async.AsyncMethodCallback<Mode> resultHandler) throws org.apache.thrift.TException {
        iface.getMode(resultHandler);
      }
    }

  }

  public static class setMode_args implements org.apache.thrift.TBase<setMode_args, setMode_args._Fields>, java.io.Serializable, Cloneable, Comparable<setMode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setMode_args");

    private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setMode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setMode_argsTupleSchemeFactory();

    /**
     * 
     * @see Mode
     */
    public @org.apache.thrift.annotation.Nullable Mode mode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Mode
       */
      MODE((short)1, "mode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODE
            return MODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Mode.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setMode_args.class, metaDataMap);
    }

    public setMode_args() {
    }

    public setMode_args(
      Mode mode)
    {
      this();
      this.mode = mode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setMode_args(setMode_args other) {
      if (other.isSetMode()) {
        this.mode = other.mode;
      }
    }

    public setMode_args deepCopy() {
      return new setMode_args(this);
    }

    @Override
    public void clear() {
      this.mode = null;
    }

    /**
     * 
     * @see Mode
     */
    @org.apache.thrift.annotation.Nullable
    public Mode getMode() {
      return this.mode;
    }

    /**
     * 
     * @see Mode
     */
    public setMode_args setMode(@org.apache.thrift.annotation.Nullable Mode mode) {
      this.mode = mode;
      return this;
    }

    public void unsetMode() {
      this.mode = null;
    }

    /** Returns true if field mode is set (has been assigned a value) and false otherwise */
    public boolean isSetMode() {
      return this.mode != null;
    }

    public void setModeIsSet(boolean value) {
      if (!value) {
        this.mode = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          setMode((Mode)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MODE:
        return getMode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MODE:
        return isSetMode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setMode_args)
        return this.equals((setMode_args)that);
      return false;
    }

    public boolean equals(setMode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mode = true && this.isSetMode();
      boolean that_present_mode = true && that.isSetMode();
      if (this_present_mode || that_present_mode) {
        if (!(this_present_mode && that_present_mode))
          return false;
        if (!this.mode.equals(that.mode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMode()) ? 131071 : 524287);
      if (isSetMode())
        hashCode = hashCode * 8191 + mode.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(setMode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMode()).compareTo(other.isSetMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, other.mode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setMode_args(");
      boolean first = true;

      sb.append("mode:");
      if (this.mode == null) {
        sb.append("null");
      } else {
        sb.append(this.mode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setMode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setMode_argsStandardScheme getScheme() {
        return new setMode_argsStandardScheme();
      }
    }

    private static class setMode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setMode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setMode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mode = rpc.thrift.leds.Mode.findByValue(iprot.readI32());
                struct.setModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setMode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mode != null) {
          oprot.writeFieldBegin(MODE_FIELD_DESC);
          oprot.writeI32(struct.mode.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setMode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setMode_argsTupleScheme getScheme() {
        return new setMode_argsTupleScheme();
      }
    }

    private static class setMode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setMode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setMode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMode()) {
          oprot.writeI32(struct.mode.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setMode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mode = rpc.thrift.leds.Mode.findByValue(iprot.readI32());
          struct.setModeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setMode_result implements org.apache.thrift.TBase<setMode_result, setMode_result._Fields>, java.io.Serializable, Cloneable, Comparable<setMode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setMode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField DEVICE_NOT_ACTIVE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceNotActiveException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setMode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setMode_resultTupleSchemeFactory();

    /**
     * 
     * @see Mode
     */
    public @org.apache.thrift.annotation.Nullable Mode success; // required
    public @org.apache.thrift.annotation.Nullable rpc.thrift.shared.DeviceNotActiveException deviceNotActiveException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Mode
       */
      SUCCESS((short)0, "success"),
      DEVICE_NOT_ACTIVE_EXCEPTION((short)1, "deviceNotActiveException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DEVICE_NOT_ACTIVE_EXCEPTION
            return DEVICE_NOT_ACTIVE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Mode.class)));
      tmpMap.put(_Fields.DEVICE_NOT_ACTIVE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("deviceNotActiveException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rpc.thrift.shared.DeviceNotActiveException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setMode_result.class, metaDataMap);
    }

    public setMode_result() {
    }

    public setMode_result(
      Mode success,
      rpc.thrift.shared.DeviceNotActiveException deviceNotActiveException)
    {
      this();
      this.success = success;
      this.deviceNotActiveException = deviceNotActiveException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setMode_result(setMode_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDeviceNotActiveException()) {
        this.deviceNotActiveException = new rpc.thrift.shared.DeviceNotActiveException(other.deviceNotActiveException);
      }
    }

    public setMode_result deepCopy() {
      return new setMode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.deviceNotActiveException = null;
    }

    /**
     * 
     * @see Mode
     */
    @org.apache.thrift.annotation.Nullable
    public Mode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see Mode
     */
    public setMode_result setSuccess(@org.apache.thrift.annotation.Nullable Mode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public rpc.thrift.shared.DeviceNotActiveException getDeviceNotActiveException() {
      return this.deviceNotActiveException;
    }

    public setMode_result setDeviceNotActiveException(@org.apache.thrift.annotation.Nullable rpc.thrift.shared.DeviceNotActiveException deviceNotActiveException) {
      this.deviceNotActiveException = deviceNotActiveException;
      return this;
    }

    public void unsetDeviceNotActiveException() {
      this.deviceNotActiveException = null;
    }

    /** Returns true if field deviceNotActiveException is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceNotActiveException() {
      return this.deviceNotActiveException != null;
    }

    public void setDeviceNotActiveExceptionIsSet(boolean value) {
      if (!value) {
        this.deviceNotActiveException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Mode)value);
        }
        break;

      case DEVICE_NOT_ACTIVE_EXCEPTION:
        if (value == null) {
          unsetDeviceNotActiveException();
        } else {
          setDeviceNotActiveException((rpc.thrift.shared.DeviceNotActiveException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DEVICE_NOT_ACTIVE_EXCEPTION:
        return getDeviceNotActiveException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DEVICE_NOT_ACTIVE_EXCEPTION:
        return isSetDeviceNotActiveException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setMode_result)
        return this.equals((setMode_result)that);
      return false;
    }

    public boolean equals(setMode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_deviceNotActiveException = true && this.isSetDeviceNotActiveException();
      boolean that_present_deviceNotActiveException = true && that.isSetDeviceNotActiveException();
      if (this_present_deviceNotActiveException || that_present_deviceNotActiveException) {
        if (!(this_present_deviceNotActiveException && that_present_deviceNotActiveException))
          return false;
        if (!this.deviceNotActiveException.equals(that.deviceNotActiveException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetDeviceNotActiveException()) ? 131071 : 524287);
      if (isSetDeviceNotActiveException())
        hashCode = hashCode * 8191 + deviceNotActiveException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(setMode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDeviceNotActiveException()).compareTo(other.isSetDeviceNotActiveException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceNotActiveException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceNotActiveException, other.deviceNotActiveException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setMode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceNotActiveException:");
      if (this.deviceNotActiveException == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceNotActiveException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setMode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setMode_resultStandardScheme getScheme() {
        return new setMode_resultStandardScheme();
      }
    }

    private static class setMode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setMode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setMode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = rpc.thrift.leds.Mode.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DEVICE_NOT_ACTIVE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.deviceNotActiveException = new rpc.thrift.shared.DeviceNotActiveException();
                struct.deviceNotActiveException.read(iprot);
                struct.setDeviceNotActiveExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setMode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.deviceNotActiveException != null) {
          oprot.writeFieldBegin(DEVICE_NOT_ACTIVE_EXCEPTION_FIELD_DESC);
          struct.deviceNotActiveException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setMode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setMode_resultTupleScheme getScheme() {
        return new setMode_resultTupleScheme();
      }
    }

    private static class setMode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setMode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setMode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDeviceNotActiveException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetDeviceNotActiveException()) {
          struct.deviceNotActiveException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setMode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = rpc.thrift.leds.Mode.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deviceNotActiveException = new rpc.thrift.shared.DeviceNotActiveException();
          struct.deviceNotActiveException.read(iprot);
          struct.setDeviceNotActiveExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMode_args implements org.apache.thrift.TBase<getMode_args, getMode_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMode_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMode_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMode_args.class, metaDataMap);
    }

    public getMode_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMode_args(getMode_args other) {
    }

    public getMode_args deepCopy() {
      return new getMode_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMode_args)
        return this.equals((getMode_args)that);
      return false;
    }

    public boolean equals(getMode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getMode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMode_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMode_argsStandardScheme getScheme() {
        return new getMode_argsStandardScheme();
      }
    }

    private static class getMode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMode_argsTupleScheme getScheme() {
        return new getMode_argsTupleScheme();
      }
    }

    private static class getMode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMode_result implements org.apache.thrift.TBase<getMode_result, getMode_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField DEVICE_NOT_ACTIVE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceNotActiveException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMode_resultTupleSchemeFactory();

    /**
     * 
     * @see Mode
     */
    public @org.apache.thrift.annotation.Nullable Mode success; // required
    public @org.apache.thrift.annotation.Nullable rpc.thrift.shared.DeviceNotActiveException deviceNotActiveException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Mode
       */
      SUCCESS((short)0, "success"),
      DEVICE_NOT_ACTIVE_EXCEPTION((short)1, "deviceNotActiveException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DEVICE_NOT_ACTIVE_EXCEPTION
            return DEVICE_NOT_ACTIVE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Mode.class)));
      tmpMap.put(_Fields.DEVICE_NOT_ACTIVE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("deviceNotActiveException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rpc.thrift.shared.DeviceNotActiveException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMode_result.class, metaDataMap);
    }

    public getMode_result() {
    }

    public getMode_result(
      Mode success,
      rpc.thrift.shared.DeviceNotActiveException deviceNotActiveException)
    {
      this();
      this.success = success;
      this.deviceNotActiveException = deviceNotActiveException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMode_result(getMode_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetDeviceNotActiveException()) {
        this.deviceNotActiveException = new rpc.thrift.shared.DeviceNotActiveException(other.deviceNotActiveException);
      }
    }

    public getMode_result deepCopy() {
      return new getMode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.deviceNotActiveException = null;
    }

    /**
     * 
     * @see Mode
     */
    @org.apache.thrift.annotation.Nullable
    public Mode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see Mode
     */
    public getMode_result setSuccess(@org.apache.thrift.annotation.Nullable Mode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public rpc.thrift.shared.DeviceNotActiveException getDeviceNotActiveException() {
      return this.deviceNotActiveException;
    }

    public getMode_result setDeviceNotActiveException(@org.apache.thrift.annotation.Nullable rpc.thrift.shared.DeviceNotActiveException deviceNotActiveException) {
      this.deviceNotActiveException = deviceNotActiveException;
      return this;
    }

    public void unsetDeviceNotActiveException() {
      this.deviceNotActiveException = null;
    }

    /** Returns true if field deviceNotActiveException is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceNotActiveException() {
      return this.deviceNotActiveException != null;
    }

    public void setDeviceNotActiveExceptionIsSet(boolean value) {
      if (!value) {
        this.deviceNotActiveException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Mode)value);
        }
        break;

      case DEVICE_NOT_ACTIVE_EXCEPTION:
        if (value == null) {
          unsetDeviceNotActiveException();
        } else {
          setDeviceNotActiveException((rpc.thrift.shared.DeviceNotActiveException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DEVICE_NOT_ACTIVE_EXCEPTION:
        return getDeviceNotActiveException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DEVICE_NOT_ACTIVE_EXCEPTION:
        return isSetDeviceNotActiveException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMode_result)
        return this.equals((getMode_result)that);
      return false;
    }

    public boolean equals(getMode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_deviceNotActiveException = true && this.isSetDeviceNotActiveException();
      boolean that_present_deviceNotActiveException = true && that.isSetDeviceNotActiveException();
      if (this_present_deviceNotActiveException || that_present_deviceNotActiveException) {
        if (!(this_present_deviceNotActiveException && that_present_deviceNotActiveException))
          return false;
        if (!this.deviceNotActiveException.equals(that.deviceNotActiveException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetDeviceNotActiveException()) ? 131071 : 524287);
      if (isSetDeviceNotActiveException())
        hashCode = hashCode * 8191 + deviceNotActiveException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDeviceNotActiveException()).compareTo(other.isSetDeviceNotActiveException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceNotActiveException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceNotActiveException, other.deviceNotActiveException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceNotActiveException:");
      if (this.deviceNotActiveException == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceNotActiveException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMode_resultStandardScheme getScheme() {
        return new getMode_resultStandardScheme();
      }
    }

    private static class getMode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = rpc.thrift.leds.Mode.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DEVICE_NOT_ACTIVE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.deviceNotActiveException = new rpc.thrift.shared.DeviceNotActiveException();
                struct.deviceNotActiveException.read(iprot);
                struct.setDeviceNotActiveExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.deviceNotActiveException != null) {
          oprot.writeFieldBegin(DEVICE_NOT_ACTIVE_EXCEPTION_FIELD_DESC);
          struct.deviceNotActiveException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMode_resultTupleScheme getScheme() {
        return new getMode_resultTupleScheme();
      }
    }

    private static class getMode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDeviceNotActiveException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetDeviceNotActiveException()) {
          struct.deviceNotActiveException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = rpc.thrift.leds.Mode.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deviceNotActiveException = new rpc.thrift.shared.DeviceNotActiveException();
          struct.deviceNotActiveException.read(iprot);
          struct.setDeviceNotActiveExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
