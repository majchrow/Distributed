/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rpc.thrift.leds;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-04-26")
public class BrightnessLed {

  public interface Iface extends BasicLed.Iface {

    public double setBrightness(double percent) throws rpc.thrift.shared.DeviceNotActiveException, InvalidPercentException, org.apache.thrift.TException;

    public double getBrightness() throws rpc.thrift.shared.DeviceNotActiveException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends BasicLed .AsyncIface {

    public void setBrightness(double percent, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException;

    public void getBrightness(org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends BasicLed.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public double setBrightness(double percent) throws rpc.thrift.shared.DeviceNotActiveException, InvalidPercentException, org.apache.thrift.TException
    {
      send_setBrightness(percent);
      return recv_setBrightness();
    }

    public void send_setBrightness(double percent) throws org.apache.thrift.TException
    {
      setBrightness_args args = new setBrightness_args();
      args.setPercent(percent);
      sendBase("setBrightness", args);
    }

    public double recv_setBrightness() throws rpc.thrift.shared.DeviceNotActiveException, InvalidPercentException, org.apache.thrift.TException
    {
      setBrightness_result result = new setBrightness_result();
      receiveBase(result, "setBrightness");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.deviceNotActiveException != null) {
        throw result.deviceNotActiveException;
      }
      if (result.invalidPercentException != null) {
        throw result.invalidPercentException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setBrightness failed: unknown result");
    }

    public double getBrightness() throws rpc.thrift.shared.DeviceNotActiveException, org.apache.thrift.TException
    {
      send_getBrightness();
      return recv_getBrightness();
    }

    public void send_getBrightness() throws org.apache.thrift.TException
    {
      getBrightness_args args = new getBrightness_args();
      sendBase("getBrightness", args);
    }

    public double recv_getBrightness() throws rpc.thrift.shared.DeviceNotActiveException, org.apache.thrift.TException
    {
      getBrightness_result result = new getBrightness_result();
      receiveBase(result, "getBrightness");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.deviceNotActiveException != null) {
        throw result.deviceNotActiveException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBrightness failed: unknown result");
    }

  }
  public static class AsyncClient extends BasicLed.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void setBrightness(double percent, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setBrightness_call method_call = new setBrightness_call(percent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setBrightness_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Double> {
      private double percent;
      public setBrightness_call(double percent, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.percent = percent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setBrightness", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setBrightness_args args = new setBrightness_args();
        args.setPercent(percent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Double getResult() throws rpc.thrift.shared.DeviceNotActiveException, InvalidPercentException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setBrightness();
      }
    }

    public void getBrightness(org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBrightness_call method_call = new getBrightness_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBrightness_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Double> {
      public getBrightness_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBrightness", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBrightness_args args = new getBrightness_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Double getResult() throws rpc.thrift.shared.DeviceNotActiveException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBrightness();
      }
    }

  }

  public static class Processor<I extends Iface> extends BasicLed.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("setBrightness", new setBrightness());
      processMap.put("getBrightness", new getBrightness());
      return processMap;
    }

    public static class setBrightness<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setBrightness_args> {
      public setBrightness() {
        super("setBrightness");
      }

      public setBrightness_args getEmptyArgsInstance() {
        return new setBrightness_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public setBrightness_result getResult(I iface, setBrightness_args args) throws org.apache.thrift.TException {
        setBrightness_result result = new setBrightness_result();
        try {
          result.success = iface.setBrightness(args.percent);
          result.setSuccessIsSet(true);
        } catch (rpc.thrift.shared.DeviceNotActiveException deviceNotActiveException) {
          result.deviceNotActiveException = deviceNotActiveException;
        } catch (InvalidPercentException invalidPercentException) {
          result.invalidPercentException = invalidPercentException;
        }
        return result;
      }
    }

    public static class getBrightness<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBrightness_args> {
      public getBrightness() {
        super("getBrightness");
      }

      public getBrightness_args getEmptyArgsInstance() {
        return new getBrightness_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getBrightness_result getResult(I iface, getBrightness_args args) throws org.apache.thrift.TException {
        getBrightness_result result = new getBrightness_result();
        try {
          result.success = iface.getBrightness();
          result.setSuccessIsSet(true);
        } catch (rpc.thrift.shared.DeviceNotActiveException deviceNotActiveException) {
          result.deviceNotActiveException = deviceNotActiveException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends BasicLed.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("setBrightness", new setBrightness());
      processMap.put("getBrightness", new getBrightness());
      return processMap;
    }

    public static class setBrightness<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setBrightness_args, java.lang.Double> {
      public setBrightness() {
        super("setBrightness");
      }

      public setBrightness_args getEmptyArgsInstance() {
        return new setBrightness_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Double>() { 
          public void onComplete(java.lang.Double o) {
            setBrightness_result result = new setBrightness_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            setBrightness_result result = new setBrightness_result();
            if (e instanceof rpc.thrift.shared.DeviceNotActiveException) {
              result.deviceNotActiveException = (rpc.thrift.shared.DeviceNotActiveException) e;
              result.setDeviceNotActiveExceptionIsSet(true);
              msg = result;
            } else if (e instanceof InvalidPercentException) {
              result.invalidPercentException = (InvalidPercentException) e;
              result.setInvalidPercentExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setBrightness_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
        iface.setBrightness(args.percent,resultHandler);
      }
    }

    public static class getBrightness<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBrightness_args, java.lang.Double> {
      public getBrightness() {
        super("getBrightness");
      }

      public getBrightness_args getEmptyArgsInstance() {
        return new getBrightness_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Double>() { 
          public void onComplete(java.lang.Double o) {
            getBrightness_result result = new getBrightness_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getBrightness_result result = new getBrightness_result();
            if (e instanceof rpc.thrift.shared.DeviceNotActiveException) {
              result.deviceNotActiveException = (rpc.thrift.shared.DeviceNotActiveException) e;
              result.setDeviceNotActiveExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBrightness_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
        iface.getBrightness(resultHandler);
      }
    }

  }

  public static class setBrightness_args implements org.apache.thrift.TBase<setBrightness_args, setBrightness_args._Fields>, java.io.Serializable, Cloneable, Comparable<setBrightness_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setBrightness_args");

    private static final org.apache.thrift.protocol.TField PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("percent", org.apache.thrift.protocol.TType.DOUBLE, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setBrightness_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setBrightness_argsTupleSchemeFactory();

    public double percent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PERCENT((short)1, "percent");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PERCENT
            return PERCENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PERCENT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PERCENT, new org.apache.thrift.meta_data.FieldMetaData("percent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setBrightness_args.class, metaDataMap);
    }

    public setBrightness_args() {
    }

    public setBrightness_args(
      double percent)
    {
      this();
      this.percent = percent;
      setPercentIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBrightness_args(setBrightness_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.percent = other.percent;
    }

    public setBrightness_args deepCopy() {
      return new setBrightness_args(this);
    }

    @Override
    public void clear() {
      setPercentIsSet(false);
      this.percent = 0.0;
    }

    public double getPercent() {
      return this.percent;
    }

    public setBrightness_args setPercent(double percent) {
      this.percent = percent;
      setPercentIsSet(true);
      return this;
    }

    public void unsetPercent() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PERCENT_ISSET_ID);
    }

    /** Returns true if field percent is set (has been assigned a value) and false otherwise */
    public boolean isSetPercent() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PERCENT_ISSET_ID);
    }

    public void setPercentIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PERCENT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case PERCENT:
        if (value == null) {
          unsetPercent();
        } else {
          setPercent((java.lang.Double)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PERCENT:
        return getPercent();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PERCENT:
        return isSetPercent();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setBrightness_args)
        return this.equals((setBrightness_args)that);
      return false;
    }

    public boolean equals(setBrightness_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_percent = true;
      boolean that_present_percent = true;
      if (this_present_percent || that_present_percent) {
        if (!(this_present_percent && that_present_percent))
          return false;
        if (this.percent != that.percent)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(percent);

      return hashCode;
    }

    @Override
    public int compareTo(setBrightness_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPercent()).compareTo(other.isSetPercent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPercent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.percent, other.percent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setBrightness_args(");
      boolean first = true;

      sb.append("percent:");
      sb.append(this.percent);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setBrightness_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setBrightness_argsStandardScheme getScheme() {
        return new setBrightness_argsStandardScheme();
      }
    }

    private static class setBrightness_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setBrightness_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setBrightness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PERCENT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.percent = iprot.readDouble();
                struct.setPercentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setBrightness_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PERCENT_FIELD_DESC);
        oprot.writeDouble(struct.percent);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setBrightness_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setBrightness_argsTupleScheme getScheme() {
        return new setBrightness_argsTupleScheme();
      }
    }

    private static class setBrightness_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setBrightness_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setBrightness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPercent()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPercent()) {
          oprot.writeDouble(struct.percent);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setBrightness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.percent = iprot.readDouble();
          struct.setPercentIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setBrightness_result implements org.apache.thrift.TBase<setBrightness_result, setBrightness_result._Fields>, java.io.Serializable, Cloneable, Comparable<setBrightness_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setBrightness_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);
    private static final org.apache.thrift.protocol.TField DEVICE_NOT_ACTIVE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceNotActiveException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INVALID_PERCENT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidPercentException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setBrightness_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setBrightness_resultTupleSchemeFactory();

    public double success; // required
    public @org.apache.thrift.annotation.Nullable rpc.thrift.shared.DeviceNotActiveException deviceNotActiveException; // required
    public @org.apache.thrift.annotation.Nullable InvalidPercentException invalidPercentException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DEVICE_NOT_ACTIVE_EXCEPTION((short)1, "deviceNotActiveException"),
      INVALID_PERCENT_EXCEPTION((short)2, "invalidPercentException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DEVICE_NOT_ACTIVE_EXCEPTION
            return DEVICE_NOT_ACTIVE_EXCEPTION;
          case 2: // INVALID_PERCENT_EXCEPTION
            return INVALID_PERCENT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.DEVICE_NOT_ACTIVE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("deviceNotActiveException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rpc.thrift.shared.DeviceNotActiveException.class)));
      tmpMap.put(_Fields.INVALID_PERCENT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("invalidPercentException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidPercentException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setBrightness_result.class, metaDataMap);
    }

    public setBrightness_result() {
    }

    public setBrightness_result(
      double success,
      rpc.thrift.shared.DeviceNotActiveException deviceNotActiveException,
      InvalidPercentException invalidPercentException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.deviceNotActiveException = deviceNotActiveException;
      this.invalidPercentException = invalidPercentException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBrightness_result(setBrightness_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetDeviceNotActiveException()) {
        this.deviceNotActiveException = new rpc.thrift.shared.DeviceNotActiveException(other.deviceNotActiveException);
      }
      if (other.isSetInvalidPercentException()) {
        this.invalidPercentException = new InvalidPercentException(other.invalidPercentException);
      }
    }

    public setBrightness_result deepCopy() {
      return new setBrightness_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
      this.deviceNotActiveException = null;
      this.invalidPercentException = null;
    }

    public double getSuccess() {
      return this.success;
    }

    public setBrightness_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public rpc.thrift.shared.DeviceNotActiveException getDeviceNotActiveException() {
      return this.deviceNotActiveException;
    }

    public setBrightness_result setDeviceNotActiveException(@org.apache.thrift.annotation.Nullable rpc.thrift.shared.DeviceNotActiveException deviceNotActiveException) {
      this.deviceNotActiveException = deviceNotActiveException;
      return this;
    }

    public void unsetDeviceNotActiveException() {
      this.deviceNotActiveException = null;
    }

    /** Returns true if field deviceNotActiveException is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceNotActiveException() {
      return this.deviceNotActiveException != null;
    }

    public void setDeviceNotActiveExceptionIsSet(boolean value) {
      if (!value) {
        this.deviceNotActiveException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public InvalidPercentException getInvalidPercentException() {
      return this.invalidPercentException;
    }

    public setBrightness_result setInvalidPercentException(@org.apache.thrift.annotation.Nullable InvalidPercentException invalidPercentException) {
      this.invalidPercentException = invalidPercentException;
      return this;
    }

    public void unsetInvalidPercentException() {
      this.invalidPercentException = null;
    }

    /** Returns true if field invalidPercentException is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalidPercentException() {
      return this.invalidPercentException != null;
    }

    public void setInvalidPercentExceptionIsSet(boolean value) {
      if (!value) {
        this.invalidPercentException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Double)value);
        }
        break;

      case DEVICE_NOT_ACTIVE_EXCEPTION:
        if (value == null) {
          unsetDeviceNotActiveException();
        } else {
          setDeviceNotActiveException((rpc.thrift.shared.DeviceNotActiveException)value);
        }
        break;

      case INVALID_PERCENT_EXCEPTION:
        if (value == null) {
          unsetInvalidPercentException();
        } else {
          setInvalidPercentException((InvalidPercentException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DEVICE_NOT_ACTIVE_EXCEPTION:
        return getDeviceNotActiveException();

      case INVALID_PERCENT_EXCEPTION:
        return getInvalidPercentException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DEVICE_NOT_ACTIVE_EXCEPTION:
        return isSetDeviceNotActiveException();
      case INVALID_PERCENT_EXCEPTION:
        return isSetInvalidPercentException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setBrightness_result)
        return this.equals((setBrightness_result)that);
      return false;
    }

    public boolean equals(setBrightness_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_deviceNotActiveException = true && this.isSetDeviceNotActiveException();
      boolean that_present_deviceNotActiveException = true && that.isSetDeviceNotActiveException();
      if (this_present_deviceNotActiveException || that_present_deviceNotActiveException) {
        if (!(this_present_deviceNotActiveException && that_present_deviceNotActiveException))
          return false;
        if (!this.deviceNotActiveException.equals(that.deviceNotActiveException))
          return false;
      }

      boolean this_present_invalidPercentException = true && this.isSetInvalidPercentException();
      boolean that_present_invalidPercentException = true && that.isSetInvalidPercentException();
      if (this_present_invalidPercentException || that_present_invalidPercentException) {
        if (!(this_present_invalidPercentException && that_present_invalidPercentException))
          return false;
        if (!this.invalidPercentException.equals(that.invalidPercentException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetDeviceNotActiveException()) ? 131071 : 524287);
      if (isSetDeviceNotActiveException())
        hashCode = hashCode * 8191 + deviceNotActiveException.hashCode();

      hashCode = hashCode * 8191 + ((isSetInvalidPercentException()) ? 131071 : 524287);
      if (isSetInvalidPercentException())
        hashCode = hashCode * 8191 + invalidPercentException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(setBrightness_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDeviceNotActiveException()).compareTo(other.isSetDeviceNotActiveException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceNotActiveException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceNotActiveException, other.deviceNotActiveException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInvalidPercentException()).compareTo(other.isSetInvalidPercentException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalidPercentException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidPercentException, other.invalidPercentException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setBrightness_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceNotActiveException:");
      if (this.deviceNotActiveException == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceNotActiveException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invalidPercentException:");
      if (this.invalidPercentException == null) {
        sb.append("null");
      } else {
        sb.append(this.invalidPercentException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setBrightness_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setBrightness_resultStandardScheme getScheme() {
        return new setBrightness_resultStandardScheme();
      }
    }

    private static class setBrightness_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setBrightness_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setBrightness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DEVICE_NOT_ACTIVE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.deviceNotActiveException = new rpc.thrift.shared.DeviceNotActiveException();
                struct.deviceNotActiveException.read(iprot);
                struct.setDeviceNotActiveExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INVALID_PERCENT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalidPercentException = new InvalidPercentException();
                struct.invalidPercentException.read(iprot);
                struct.setInvalidPercentExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setBrightness_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.deviceNotActiveException != null) {
          oprot.writeFieldBegin(DEVICE_NOT_ACTIVE_EXCEPTION_FIELD_DESC);
          struct.deviceNotActiveException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.invalidPercentException != null) {
          oprot.writeFieldBegin(INVALID_PERCENT_EXCEPTION_FIELD_DESC);
          struct.invalidPercentException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setBrightness_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setBrightness_resultTupleScheme getScheme() {
        return new setBrightness_resultTupleScheme();
      }
    }

    private static class setBrightness_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setBrightness_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setBrightness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDeviceNotActiveException()) {
          optionals.set(1);
        }
        if (struct.isSetInvalidPercentException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
        if (struct.isSetDeviceNotActiveException()) {
          struct.deviceNotActiveException.write(oprot);
        }
        if (struct.isSetInvalidPercentException()) {
          struct.invalidPercentException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setBrightness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deviceNotActiveException = new rpc.thrift.shared.DeviceNotActiveException();
          struct.deviceNotActiveException.read(iprot);
          struct.setDeviceNotActiveExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.invalidPercentException = new InvalidPercentException();
          struct.invalidPercentException.read(iprot);
          struct.setInvalidPercentExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getBrightness_args implements org.apache.thrift.TBase<getBrightness_args, getBrightness_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBrightness_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBrightness_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBrightness_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBrightness_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBrightness_args.class, metaDataMap);
    }

    public getBrightness_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBrightness_args(getBrightness_args other) {
    }

    public getBrightness_args deepCopy() {
      return new getBrightness_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getBrightness_args)
        return this.equals((getBrightness_args)that);
      return false;
    }

    public boolean equals(getBrightness_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getBrightness_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBrightness_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBrightness_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBrightness_argsStandardScheme getScheme() {
        return new getBrightness_argsStandardScheme();
      }
    }

    private static class getBrightness_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBrightness_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBrightness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBrightness_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBrightness_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBrightness_argsTupleScheme getScheme() {
        return new getBrightness_argsTupleScheme();
      }
    }

    private static class getBrightness_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBrightness_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBrightness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBrightness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getBrightness_result implements org.apache.thrift.TBase<getBrightness_result, getBrightness_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBrightness_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBrightness_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);
    private static final org.apache.thrift.protocol.TField DEVICE_NOT_ACTIVE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceNotActiveException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBrightness_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBrightness_resultTupleSchemeFactory();

    public double success; // required
    public @org.apache.thrift.annotation.Nullable rpc.thrift.shared.DeviceNotActiveException deviceNotActiveException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DEVICE_NOT_ACTIVE_EXCEPTION((short)1, "deviceNotActiveException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DEVICE_NOT_ACTIVE_EXCEPTION
            return DEVICE_NOT_ACTIVE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.DEVICE_NOT_ACTIVE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("deviceNotActiveException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rpc.thrift.shared.DeviceNotActiveException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBrightness_result.class, metaDataMap);
    }

    public getBrightness_result() {
    }

    public getBrightness_result(
      double success,
      rpc.thrift.shared.DeviceNotActiveException deviceNotActiveException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.deviceNotActiveException = deviceNotActiveException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBrightness_result(getBrightness_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetDeviceNotActiveException()) {
        this.deviceNotActiveException = new rpc.thrift.shared.DeviceNotActiveException(other.deviceNotActiveException);
      }
    }

    public getBrightness_result deepCopy() {
      return new getBrightness_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
      this.deviceNotActiveException = null;
    }

    public double getSuccess() {
      return this.success;
    }

    public getBrightness_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public rpc.thrift.shared.DeviceNotActiveException getDeviceNotActiveException() {
      return this.deviceNotActiveException;
    }

    public getBrightness_result setDeviceNotActiveException(@org.apache.thrift.annotation.Nullable rpc.thrift.shared.DeviceNotActiveException deviceNotActiveException) {
      this.deviceNotActiveException = deviceNotActiveException;
      return this;
    }

    public void unsetDeviceNotActiveException() {
      this.deviceNotActiveException = null;
    }

    /** Returns true if field deviceNotActiveException is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceNotActiveException() {
      return this.deviceNotActiveException != null;
    }

    public void setDeviceNotActiveExceptionIsSet(boolean value) {
      if (!value) {
        this.deviceNotActiveException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Double)value);
        }
        break;

      case DEVICE_NOT_ACTIVE_EXCEPTION:
        if (value == null) {
          unsetDeviceNotActiveException();
        } else {
          setDeviceNotActiveException((rpc.thrift.shared.DeviceNotActiveException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DEVICE_NOT_ACTIVE_EXCEPTION:
        return getDeviceNotActiveException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DEVICE_NOT_ACTIVE_EXCEPTION:
        return isSetDeviceNotActiveException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getBrightness_result)
        return this.equals((getBrightness_result)that);
      return false;
    }

    public boolean equals(getBrightness_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_deviceNotActiveException = true && this.isSetDeviceNotActiveException();
      boolean that_present_deviceNotActiveException = true && that.isSetDeviceNotActiveException();
      if (this_present_deviceNotActiveException || that_present_deviceNotActiveException) {
        if (!(this_present_deviceNotActiveException && that_present_deviceNotActiveException))
          return false;
        if (!this.deviceNotActiveException.equals(that.deviceNotActiveException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetDeviceNotActiveException()) ? 131071 : 524287);
      if (isSetDeviceNotActiveException())
        hashCode = hashCode * 8191 + deviceNotActiveException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getBrightness_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDeviceNotActiveException()).compareTo(other.isSetDeviceNotActiveException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceNotActiveException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceNotActiveException, other.deviceNotActiveException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBrightness_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceNotActiveException:");
      if (this.deviceNotActiveException == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceNotActiveException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBrightness_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBrightness_resultStandardScheme getScheme() {
        return new getBrightness_resultStandardScheme();
      }
    }

    private static class getBrightness_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBrightness_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBrightness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DEVICE_NOT_ACTIVE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.deviceNotActiveException = new rpc.thrift.shared.DeviceNotActiveException();
                struct.deviceNotActiveException.read(iprot);
                struct.setDeviceNotActiveExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBrightness_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.deviceNotActiveException != null) {
          oprot.writeFieldBegin(DEVICE_NOT_ACTIVE_EXCEPTION_FIELD_DESC);
          struct.deviceNotActiveException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBrightness_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBrightness_resultTupleScheme getScheme() {
        return new getBrightness_resultTupleScheme();
      }
    }

    private static class getBrightness_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBrightness_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBrightness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDeviceNotActiveException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
        if (struct.isSetDeviceNotActiveException()) {
          struct.deviceNotActiveException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBrightness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deviceNotActiveException = new rpc.thrift.shared.DeviceNotActiveException();
          struct.deviceNotActiveException.read(iprot);
          struct.setDeviceNotActiveExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
