/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rpc.thrift.vaccum;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-04-26")
public class VaccumRobot {

  public interface Iface extends rpc.thrift.shared.BaseDevice.Iface {

    public java.util.Set<Room> cleanRooms(java.util.Set<Room> rooms) throws rpc.thrift.shared.DeviceNotActiveException, InvalidOrderException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends rpc.thrift.shared.BaseDevice .AsyncIface {

    public void cleanRooms(java.util.Set<Room> rooms, org.apache.thrift.async.AsyncMethodCallback<java.util.Set<Room>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends rpc.thrift.shared.BaseDevice.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.Set<Room> cleanRooms(java.util.Set<Room> rooms) throws rpc.thrift.shared.DeviceNotActiveException, InvalidOrderException, org.apache.thrift.TException
    {
      send_cleanRooms(rooms);
      return recv_cleanRooms();
    }

    public void send_cleanRooms(java.util.Set<Room> rooms) throws org.apache.thrift.TException
    {
      cleanRooms_args args = new cleanRooms_args();
      args.setRooms(rooms);
      sendBase("cleanRooms", args);
    }

    public java.util.Set<Room> recv_cleanRooms() throws rpc.thrift.shared.DeviceNotActiveException, InvalidOrderException, org.apache.thrift.TException
    {
      cleanRooms_result result = new cleanRooms_result();
      receiveBase(result, "cleanRooms");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.deviveNotActiveException != null) {
        throw result.deviveNotActiveException;
      }
      if (result.invalidOrderException != null) {
        throw result.invalidOrderException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cleanRooms failed: unknown result");
    }

  }
  public static class AsyncClient extends rpc.thrift.shared.BaseDevice.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void cleanRooms(java.util.Set<Room> rooms, org.apache.thrift.async.AsyncMethodCallback<java.util.Set<Room>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cleanRooms_call method_call = new cleanRooms_call(rooms, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cleanRooms_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Set<Room>> {
      private java.util.Set<Room> rooms;
      public cleanRooms_call(java.util.Set<Room> rooms, org.apache.thrift.async.AsyncMethodCallback<java.util.Set<Room>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rooms = rooms;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cleanRooms", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cleanRooms_args args = new cleanRooms_args();
        args.setRooms(rooms);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Set<Room> getResult() throws rpc.thrift.shared.DeviceNotActiveException, InvalidOrderException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cleanRooms();
      }
    }

  }

  public static class Processor<I extends Iface> extends rpc.thrift.shared.BaseDevice.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("cleanRooms", new cleanRooms());
      return processMap;
    }

    public static class cleanRooms<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cleanRooms_args> {
      public cleanRooms() {
        super("cleanRooms");
      }

      public cleanRooms_args getEmptyArgsInstance() {
        return new cleanRooms_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public cleanRooms_result getResult(I iface, cleanRooms_args args) throws org.apache.thrift.TException {
        cleanRooms_result result = new cleanRooms_result();
        try {
          result.success = iface.cleanRooms(args.rooms);
        } catch (rpc.thrift.shared.DeviceNotActiveException deviveNotActiveException) {
          result.deviveNotActiveException = deviveNotActiveException;
        } catch (InvalidOrderException invalidOrderException) {
          result.invalidOrderException = invalidOrderException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends rpc.thrift.shared.BaseDevice.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("cleanRooms", new cleanRooms());
      return processMap;
    }

    public static class cleanRooms<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cleanRooms_args, java.util.Set<Room>> {
      public cleanRooms() {
        super("cleanRooms");
      }

      public cleanRooms_args getEmptyArgsInstance() {
        return new cleanRooms_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Set<Room>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Set<Room>>() { 
          public void onComplete(java.util.Set<Room> o) {
            cleanRooms_result result = new cleanRooms_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            cleanRooms_result result = new cleanRooms_result();
            if (e instanceof rpc.thrift.shared.DeviceNotActiveException) {
              result.deviveNotActiveException = (rpc.thrift.shared.DeviceNotActiveException) e;
              result.setDeviveNotActiveExceptionIsSet(true);
              msg = result;
            } else if (e instanceof InvalidOrderException) {
              result.invalidOrderException = (InvalidOrderException) e;
              result.setInvalidOrderExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cleanRooms_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Set<Room>> resultHandler) throws org.apache.thrift.TException {
        iface.cleanRooms(args.rooms,resultHandler);
      }
    }

  }

  public static class cleanRooms_args implements org.apache.thrift.TBase<cleanRooms_args, cleanRooms_args._Fields>, java.io.Serializable, Cloneable, Comparable<cleanRooms_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cleanRooms_args");

    private static final org.apache.thrift.protocol.TField ROOMS_FIELD_DESC = new org.apache.thrift.protocol.TField("rooms", org.apache.thrift.protocol.TType.SET, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cleanRooms_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cleanRooms_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Set<Room> rooms; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOMS((short)1, "rooms");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOMS
            return ROOMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOMS, new org.apache.thrift.meta_data.FieldMetaData("rooms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.SET          , "Rooms")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cleanRooms_args.class, metaDataMap);
    }

    public cleanRooms_args() {
    }

    public cleanRooms_args(
      java.util.Set<Room> rooms)
    {
      this();
      this.rooms = rooms;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cleanRooms_args(cleanRooms_args other) {
      if (other.isSetRooms()) {
        java.util.Set<Room> __this__rooms = java.util.EnumSet.noneOf(Room.class);
        for (Room other_element : other.rooms) {
          __this__rooms.add(other_element);
        }
        this.rooms = __this__rooms;
      }
    }

    public cleanRooms_args deepCopy() {
      return new cleanRooms_args(this);
    }

    @Override
    public void clear() {
      this.rooms = null;
    }

    public int getRoomsSize() {
      return (this.rooms == null) ? 0 : this.rooms.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Room> getRoomsIterator() {
      return (this.rooms == null) ? null : this.rooms.iterator();
    }

    public void addToRooms(Room elem) {
      if (this.rooms == null) {
        this.rooms = java.util.EnumSet.noneOf(Room.class);
      }
      this.rooms.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<Room> getRooms() {
      return this.rooms;
    }

    public cleanRooms_args setRooms(@org.apache.thrift.annotation.Nullable java.util.Set<Room> rooms) {
      this.rooms = rooms;
      return this;
    }

    public void unsetRooms() {
      this.rooms = null;
    }

    /** Returns true if field rooms is set (has been assigned a value) and false otherwise */
    public boolean isSetRooms() {
      return this.rooms != null;
    }

    public void setRoomsIsSet(boolean value) {
      if (!value) {
        this.rooms = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ROOMS:
        if (value == null) {
          unsetRooms();
        } else {
          setRooms((java.util.Set<Room>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOMS:
        return getRooms();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOMS:
        return isSetRooms();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof cleanRooms_args)
        return this.equals((cleanRooms_args)that);
      return false;
    }

    public boolean equals(cleanRooms_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rooms = true && this.isSetRooms();
      boolean that_present_rooms = true && that.isSetRooms();
      if (this_present_rooms || that_present_rooms) {
        if (!(this_present_rooms && that_present_rooms))
          return false;
        if (!this.rooms.equals(that.rooms))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRooms()) ? 131071 : 524287);
      if (isSetRooms())
        hashCode = hashCode * 8191 + rooms.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(cleanRooms_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRooms()).compareTo(other.isSetRooms());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRooms()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rooms, other.rooms);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cleanRooms_args(");
      boolean first = true;

      sb.append("rooms:");
      if (this.rooms == null) {
        sb.append("null");
      } else {
        sb.append(this.rooms);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cleanRooms_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cleanRooms_argsStandardScheme getScheme() {
        return new cleanRooms_argsStandardScheme();
      }
    }

    private static class cleanRooms_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<cleanRooms_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cleanRooms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOMS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set8 = iprot.readSetBegin();
                  struct.rooms = java.util.EnumSet.noneOf(Room.class);
                  @org.apache.thrift.annotation.Nullable Room _elem9;
                  for (int _i10 = 0; _i10 < _set8.size; ++_i10)
                  {
                    _elem9 = rpc.thrift.vaccum.Room.findByValue(iprot.readI32());
                    if (_elem9 != null)
                    {
                      struct.rooms.add(_elem9);
                    }
                  }
                  iprot.readSetEnd();
                }
                struct.setRoomsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cleanRooms_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rooms != null) {
          oprot.writeFieldBegin(ROOMS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.rooms.size()));
            for (Room _iter11 : struct.rooms)
            {
              oprot.writeI32(_iter11.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cleanRooms_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cleanRooms_argsTupleScheme getScheme() {
        return new cleanRooms_argsTupleScheme();
      }
    }

    private static class cleanRooms_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<cleanRooms_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cleanRooms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRooms()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRooms()) {
          {
            oprot.writeI32(struct.rooms.size());
            for (Room _iter12 : struct.rooms)
            {
              oprot.writeI32(_iter12.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cleanRooms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set13 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.rooms = java.util.EnumSet.noneOf(Room.class);
            @org.apache.thrift.annotation.Nullable Room _elem14;
            for (int _i15 = 0; _i15 < _set13.size; ++_i15)
            {
              _elem14 = rpc.thrift.vaccum.Room.findByValue(iprot.readI32());
              if (_elem14 != null)
              {
                struct.rooms.add(_elem14);
              }
            }
          }
          struct.setRoomsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class cleanRooms_result implements org.apache.thrift.TBase<cleanRooms_result, cleanRooms_result._Fields>, java.io.Serializable, Cloneable, Comparable<cleanRooms_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cleanRooms_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);
    private static final org.apache.thrift.protocol.TField DEVIVE_NOT_ACTIVE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("deviveNotActiveException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INVALID_ORDER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidOrderException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cleanRooms_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cleanRooms_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Set<Room> success; // required
    public @org.apache.thrift.annotation.Nullable rpc.thrift.shared.DeviceNotActiveException deviveNotActiveException; // required
    public @org.apache.thrift.annotation.Nullable InvalidOrderException invalidOrderException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DEVIVE_NOT_ACTIVE_EXCEPTION((short)1, "deviveNotActiveException"),
      INVALID_ORDER_EXCEPTION((short)2, "invalidOrderException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DEVIVE_NOT_ACTIVE_EXCEPTION
            return DEVIVE_NOT_ACTIVE_EXCEPTION;
          case 2: // INVALID_ORDER_EXCEPTION
            return INVALID_ORDER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.SET          , "Rooms")));
      tmpMap.put(_Fields.DEVIVE_NOT_ACTIVE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("deviveNotActiveException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rpc.thrift.shared.DeviceNotActiveException.class)));
      tmpMap.put(_Fields.INVALID_ORDER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("invalidOrderException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidOrderException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cleanRooms_result.class, metaDataMap);
    }

    public cleanRooms_result() {
    }

    public cleanRooms_result(
      java.util.Set<Room> success,
      rpc.thrift.shared.DeviceNotActiveException deviveNotActiveException,
      InvalidOrderException invalidOrderException)
    {
      this();
      this.success = success;
      this.deviveNotActiveException = deviveNotActiveException;
      this.invalidOrderException = invalidOrderException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cleanRooms_result(cleanRooms_result other) {
      if (other.isSetSuccess()) {
        java.util.Set<Room> __this__success = java.util.EnumSet.noneOf(Room.class);
        for (Room other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetDeviveNotActiveException()) {
        this.deviveNotActiveException = new rpc.thrift.shared.DeviceNotActiveException(other.deviveNotActiveException);
      }
      if (other.isSetInvalidOrderException()) {
        this.invalidOrderException = new InvalidOrderException(other.invalidOrderException);
      }
    }

    public cleanRooms_result deepCopy() {
      return new cleanRooms_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.deviveNotActiveException = null;
      this.invalidOrderException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Room> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Room elem) {
      if (this.success == null) {
        this.success = java.util.EnumSet.noneOf(Room.class);
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<Room> getSuccess() {
      return this.success;
    }

    public cleanRooms_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Set<Room> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public rpc.thrift.shared.DeviceNotActiveException getDeviveNotActiveException() {
      return this.deviveNotActiveException;
    }

    public cleanRooms_result setDeviveNotActiveException(@org.apache.thrift.annotation.Nullable rpc.thrift.shared.DeviceNotActiveException deviveNotActiveException) {
      this.deviveNotActiveException = deviveNotActiveException;
      return this;
    }

    public void unsetDeviveNotActiveException() {
      this.deviveNotActiveException = null;
    }

    /** Returns true if field deviveNotActiveException is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviveNotActiveException() {
      return this.deviveNotActiveException != null;
    }

    public void setDeviveNotActiveExceptionIsSet(boolean value) {
      if (!value) {
        this.deviveNotActiveException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public InvalidOrderException getInvalidOrderException() {
      return this.invalidOrderException;
    }

    public cleanRooms_result setInvalidOrderException(@org.apache.thrift.annotation.Nullable InvalidOrderException invalidOrderException) {
      this.invalidOrderException = invalidOrderException;
      return this;
    }

    public void unsetInvalidOrderException() {
      this.invalidOrderException = null;
    }

    /** Returns true if field invalidOrderException is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalidOrderException() {
      return this.invalidOrderException != null;
    }

    public void setInvalidOrderExceptionIsSet(boolean value) {
      if (!value) {
        this.invalidOrderException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Set<Room>)value);
        }
        break;

      case DEVIVE_NOT_ACTIVE_EXCEPTION:
        if (value == null) {
          unsetDeviveNotActiveException();
        } else {
          setDeviveNotActiveException((rpc.thrift.shared.DeviceNotActiveException)value);
        }
        break;

      case INVALID_ORDER_EXCEPTION:
        if (value == null) {
          unsetInvalidOrderException();
        } else {
          setInvalidOrderException((InvalidOrderException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DEVIVE_NOT_ACTIVE_EXCEPTION:
        return getDeviveNotActiveException();

      case INVALID_ORDER_EXCEPTION:
        return getInvalidOrderException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DEVIVE_NOT_ACTIVE_EXCEPTION:
        return isSetDeviveNotActiveException();
      case INVALID_ORDER_EXCEPTION:
        return isSetInvalidOrderException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof cleanRooms_result)
        return this.equals((cleanRooms_result)that);
      return false;
    }

    public boolean equals(cleanRooms_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_deviveNotActiveException = true && this.isSetDeviveNotActiveException();
      boolean that_present_deviveNotActiveException = true && that.isSetDeviveNotActiveException();
      if (this_present_deviveNotActiveException || that_present_deviveNotActiveException) {
        if (!(this_present_deviveNotActiveException && that_present_deviveNotActiveException))
          return false;
        if (!this.deviveNotActiveException.equals(that.deviveNotActiveException))
          return false;
      }

      boolean this_present_invalidOrderException = true && this.isSetInvalidOrderException();
      boolean that_present_invalidOrderException = true && that.isSetInvalidOrderException();
      if (this_present_invalidOrderException || that_present_invalidOrderException) {
        if (!(this_present_invalidOrderException && that_present_invalidOrderException))
          return false;
        if (!this.invalidOrderException.equals(that.invalidOrderException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetDeviveNotActiveException()) ? 131071 : 524287);
      if (isSetDeviveNotActiveException())
        hashCode = hashCode * 8191 + deviveNotActiveException.hashCode();

      hashCode = hashCode * 8191 + ((isSetInvalidOrderException()) ? 131071 : 524287);
      if (isSetInvalidOrderException())
        hashCode = hashCode * 8191 + invalidOrderException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(cleanRooms_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDeviveNotActiveException()).compareTo(other.isSetDeviveNotActiveException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviveNotActiveException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviveNotActiveException, other.deviveNotActiveException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInvalidOrderException()).compareTo(other.isSetInvalidOrderException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalidOrderException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidOrderException, other.invalidOrderException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cleanRooms_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviveNotActiveException:");
      if (this.deviveNotActiveException == null) {
        sb.append("null");
      } else {
        sb.append(this.deviveNotActiveException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invalidOrderException:");
      if (this.invalidOrderException == null) {
        sb.append("null");
      } else {
        sb.append(this.invalidOrderException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cleanRooms_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cleanRooms_resultStandardScheme getScheme() {
        return new cleanRooms_resultStandardScheme();
      }
    }

    private static class cleanRooms_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<cleanRooms_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cleanRooms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set16 = iprot.readSetBegin();
                  struct.success = java.util.EnumSet.noneOf(Room.class);
                  @org.apache.thrift.annotation.Nullable Room _elem17;
                  for (int _i18 = 0; _i18 < _set16.size; ++_i18)
                  {
                    _elem17 = rpc.thrift.vaccum.Room.findByValue(iprot.readI32());
                    if (_elem17 != null)
                    {
                      struct.success.add(_elem17);
                    }
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DEVIVE_NOT_ACTIVE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.deviveNotActiveException = new rpc.thrift.shared.DeviceNotActiveException();
                struct.deviveNotActiveException.read(iprot);
                struct.setDeviveNotActiveExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INVALID_ORDER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalidOrderException = new InvalidOrderException();
                struct.invalidOrderException.read(iprot);
                struct.setInvalidOrderExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cleanRooms_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (Room _iter19 : struct.success)
            {
              oprot.writeI32(_iter19.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.deviveNotActiveException != null) {
          oprot.writeFieldBegin(DEVIVE_NOT_ACTIVE_EXCEPTION_FIELD_DESC);
          struct.deviveNotActiveException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.invalidOrderException != null) {
          oprot.writeFieldBegin(INVALID_ORDER_EXCEPTION_FIELD_DESC);
          struct.invalidOrderException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cleanRooms_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cleanRooms_resultTupleScheme getScheme() {
        return new cleanRooms_resultTupleScheme();
      }
    }

    private static class cleanRooms_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<cleanRooms_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cleanRooms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDeviveNotActiveException()) {
          optionals.set(1);
        }
        if (struct.isSetInvalidOrderException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Room _iter20 : struct.success)
            {
              oprot.writeI32(_iter20.getValue());
            }
          }
        }
        if (struct.isSetDeviveNotActiveException()) {
          struct.deviveNotActiveException.write(oprot);
        }
        if (struct.isSetInvalidOrderException()) {
          struct.invalidOrderException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cleanRooms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set21 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = java.util.EnumSet.noneOf(Room.class);
            @org.apache.thrift.annotation.Nullable Room _elem22;
            for (int _i23 = 0; _i23 < _set21.size; ++_i23)
            {
              _elem22 = rpc.thrift.vaccum.Room.findByValue(iprot.readI32());
              if (_elem22 != null)
              {
                struct.success.add(_elem22);
              }
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deviveNotActiveException = new rpc.thrift.shared.DeviceNotActiveException();
          struct.deviveNotActiveException.read(iprot);
          struct.setDeviveNotActiveExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.invalidOrderException = new InvalidOrderException();
          struct.invalidOrderException.read(iprot);
          struct.setInvalidOrderExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
