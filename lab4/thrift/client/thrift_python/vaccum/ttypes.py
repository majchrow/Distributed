#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import thrift_python.shared.ttypes

from thrift.transport import TTransport
all_structs = []


class Room(object):
    KITCHEN = 0
    BATHROOM = 1
    LIVINGROOM = 2

    _VALUES_TO_NAMES = {
        0: "KITCHEN",
        1: "BATHROOM",
        2: "LIVINGROOM",
    }

    _NAMES_TO_VALUES = {
        "KITCHEN": 0,
        "BATHROOM": 1,
        "LIVINGROOM": 2,
    }


class InvalidOrderException(TException):
    """
    Attributes:
     - rooms
     - reason

    """


    def __init__(self, rooms=None, reason=None,):
        self.rooms = rooms
        self.reason = reason

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.rooms = set()
                    (_etype3, _size0) = iprot.readSetBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.rooms.add(_elem5)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InvalidOrderException')
        if self.rooms is not None:
            oprot.writeFieldBegin('rooms', TType.SET, 1)
            oprot.writeSetBegin(TType.I32, len(self.rooms))
            for iter6 in self.rooms:
                oprot.writeI32(iter6)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason.encode('utf-8') if sys.version_info[0] == 2 else self.reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Config(object):
    """
    Attributes:
     - autoCharge
     - autoGarbageDispose
     - autoClean

    """


    def __init__(self, autoCharge=None, autoGarbageDispose=None, autoClean=None,):
        self.autoCharge = autoCharge
        self.autoGarbageDispose = autoGarbageDispose
        self.autoClean = autoClean

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.autoCharge = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.autoGarbageDispose = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.autoClean = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Config')
        if self.autoCharge is not None:
            oprot.writeFieldBegin('autoCharge', TType.BOOL, 1)
            oprot.writeBool(self.autoCharge)
            oprot.writeFieldEnd()
        if self.autoGarbageDispose is not None:
            oprot.writeFieldBegin('autoGarbageDispose', TType.BOOL, 2)
            oprot.writeBool(self.autoGarbageDispose)
            oprot.writeFieldEnd()
        if self.autoClean is not None:
            oprot.writeFieldBegin('autoClean', TType.BOOL, 3)
            oprot.writeBool(self.autoClean)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(InvalidOrderException)
InvalidOrderException.thrift_spec = (
    None,  # 0
    (1, TType.SET, 'rooms', (TType.I32, None, False), None, ),  # 1
    (2, TType.STRING, 'reason', 'UTF8', None, ),  # 2
)
all_structs.append(Config)
Config.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'autoCharge', None, None, ),  # 1
    (2, TType.BOOL, 'autoGarbageDispose', None, None, ),  # 2
    (3, TType.BOOL, 'autoClean', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs
