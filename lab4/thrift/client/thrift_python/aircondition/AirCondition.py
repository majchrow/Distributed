#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import thrift_python.shared.BaseDevice
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(thrift_python.shared.BaseDevice.Iface):
    def changeTemperature(self, temperature):
        """
        Parameters:
         - temperature

        """
        pass


class Client(thrift_python.shared.BaseDevice.Client, Iface):
    def __init__(self, iprot, oprot=None):
        thrift_python.shared.BaseDevice.Client.__init__(self, iprot, oprot)

    def changeTemperature(self, temperature):
        """
        Parameters:
         - temperature

        """
        self.send_changeTemperature(temperature)
        return self.recv_changeTemperature()

    def send_changeTemperature(self, temperature):
        self._oprot.writeMessageBegin('changeTemperature', TMessageType.CALL, self._seqid)
        args = changeTemperature_args()
        args.temperature = temperature
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_changeTemperature(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = changeTemperature_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.deviceNotActiveException is not None:
            raise result.deviceNotActiveException
        if result.invalidTemperatureException is not None:
            raise result.invalidTemperatureException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "changeTemperature failed: unknown result")


class Processor(thrift_python.shared.BaseDevice.Processor, Iface, TProcessor):
    def __init__(self, handler):
        thrift_python.shared.BaseDevice.Processor.__init__(self, handler)
        self._processMap["changeTemperature"] = Processor.process_changeTemperature

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_changeTemperature(self, seqid, iprot, oprot):
        args = changeTemperature_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = changeTemperature_result()
        try:
            result.success = self._handler.changeTemperature(args.temperature)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except thrift_python.shared.ttypes.DeviceNotActiveException as deviceNotActiveException:
            msg_type = TMessageType.REPLY
            result.deviceNotActiveException = deviceNotActiveException
        except InvalidTemperatureException as invalidTemperatureException:
            msg_type = TMessageType.REPLY
            result.invalidTemperatureException = invalidTemperatureException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("changeTemperature", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class changeTemperature_args(object):
    """
    Attributes:
     - temperature

    """


    def __init__(self, temperature=None,):
        self.temperature = temperature

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.temperature = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('changeTemperature_args')
        if self.temperature is not None:
            oprot.writeFieldBegin('temperature', TType.DOUBLE, 1)
            oprot.writeDouble(self.temperature)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(changeTemperature_args)
changeTemperature_args.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'temperature', None, None, ),  # 1
)


class changeTemperature_result(object):
    """
    Attributes:
     - success
     - deviceNotActiveException
     - invalidTemperatureException

    """


    def __init__(self, success=None, deviceNotActiveException=None, invalidTemperatureException=None,):
        self.success = success
        self.deviceNotActiveException = deviceNotActiveException
        self.invalidTemperatureException = invalidTemperatureException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.DOUBLE:
                    self.success = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.deviceNotActiveException = thrift_python.shared.ttypes.DeviceNotActiveException()
                    self.deviceNotActiveException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.invalidTemperatureException = InvalidTemperatureException()
                    self.invalidTemperatureException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('changeTemperature_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.DOUBLE, 0)
            oprot.writeDouble(self.success)
            oprot.writeFieldEnd()
        if self.deviceNotActiveException is not None:
            oprot.writeFieldBegin('deviceNotActiveException', TType.STRUCT, 1)
            self.deviceNotActiveException.write(oprot)
            oprot.writeFieldEnd()
        if self.invalidTemperatureException is not None:
            oprot.writeFieldBegin('invalidTemperatureException', TType.STRUCT, 2)
            self.invalidTemperatureException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(changeTemperature_result)
changeTemperature_result.thrift_spec = (
    (0, TType.DOUBLE, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'deviceNotActiveException', [thrift_python.shared.ttypes.DeviceNotActiveException, None], None, ),  # 1
    (2, TType.STRUCT, 'invalidTemperatureException', [InvalidTemperatureException, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs

